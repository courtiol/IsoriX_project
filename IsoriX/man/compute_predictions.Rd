% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/isoscape.R
\name{compute_predictions}
\alias{compute_predictions}
\title{Compute predictions}
\usage{
compute_predictions(raster, model, list_var, verbose = TRUE)
}
\arguments{
\item{raster}{The structural raster (\var{RasterLayer}) such as an elevation
raster created using \code{\link{prepelev}}}

\item{model}{The model to use for the prediction}

\item{list_var}{The argument for the input \code{variances} of \code{\link[spaMM]{predict.HLfit}}}

\item{verbose}{A \var{logical} indicating whether information about the
progress of the procedure should be displayed or not while the function is
running. By default verbose is \var{TRUE} if users use an interactive R
session and \var{FALSE} otherwise.}
}
\value{
A list containing the processed output
}
\description{
This is an internal function that is called by other functions. It should not
be called by the user. It is used as a wrapper to
\code{\link[spaMM]{predict.HLfit}}, to compute predictions based on the
geostatistical models. Compared to the spaMM function, this prediction
function can handle rasters and split the prediction job into manageable
chunks.
}
\examples{

## The examples below will only be run if sufficient time is allowed
## You can change that by typing e.g. options_IsoriX(example_maxtime = XX)
## if you want to allow for examples taking up to ca. XX seconds to run
## (so don't write XX but put a number instead!)

if(getOption_IsoriX("example_maxtime") > 10) {

## We prepare the data
GNIPDataDEagg <- prepsources(data = GNIPDataDE)

## We fit the models
GermanFit <- isofit(data = GNIPDataDEagg,
                    mean_model_fix = list(elev = TRUE, lat_abs = TRUE))

mean_pred <- compute_predictions(raster = ElevRasterDE,
                                model = GermanFit$mean_fit,
                                list_var = list(predVar = TRUE))
                                
lapply(mean_pred, head)

disp_pred <- compute_predictions(raster = ElevRasterDE,
                                 model = GermanFit$disp_fit,
                                 list_var = list(respVar = TRUE))
                                
lapply(disp_pred, head)
}


}
